; There is bug with re.none, which makes union accepts the empty string.
(define nfa.char () String)

(declare-const nfa.epsilon nfa.char)
(declare-const nfa.allchar nfa.char)
(declare-const nfa.range (-> Int Int nfa.char))
(declare-const nfa.push nfa.char)
(declare-const nfa.pop nfa.char)

(declare-type nfa.trans ())
(declare-const nfa.trans.null nfa.trans)
(declare-const nfa.trans.decline nfa.trans)
(declare-const nfa.trans.list (-> nfa.trans nfa.trans nfa.trans) :right-assoc-nil nfa.trans.null)
(declare-const nfa.trans.init (-> nfa.char nfa.trans nfa.trans))

(program $as_list ((t nfa.trans) (tt nfa.trans :list))
  (nfa.trans) nfa.trans
  (
    (($as_list (nfa.trans.list t tt)) (nfa.trans.list t tt))
    (($as_list t) (nfa.trans.list t))
  )
)

(program $get_trans_rec ((regex RegLan) (tail nfa.trans) (s String)(r1 RegLan) (rr RegLan :list) (c0 String) (c1 String))
  (RegLan nfa.trans) nfa.trans ; regex tail -> new_tail
  (
    (($get_trans_rec re.all tail) ($get_trans_rec (re.* re.allchar) tail))
    (($get_trans_rec (re.opt r1) tail) ($get_trans_rec (re.union @re.empty r1) tail))
    (($get_trans_rec (re.+ r1) tail) ($get_trans_rec (re.++ r1 (re.* r1)) tail))

    ;(($get_trans_rec (re.range c0 c1) tail) ($get_trans_rec (str.to_re "a") tail))
    (($get_trans_rec (re.range c0 c1) tail) (nfa.trans.init (nfa.range (eo::to_z c0) (eo::to_z c1)) tail))
    
    (($get_trans_rec (re.* r1) tail) (eo::cons nfa.trans.list (nfa.trans.init nfa.push ($get_trans_rec r1 (nfa.trans.init nfa.pop tail))) ($as_list tail)))

    (($get_trans_rec re.allchar tail) (nfa.trans.init nfa.allchar tail))

    (($get_trans_rec re.none tail) nfa.trans.null)

    (($get_trans_rec (re.union r1 rr) tail)
      (eo::define ((r1n ($get_trans_rec r1 tail))) 
      (eo::define ((rrn ($get_trans_rec rr tail)))
      (eo::list_concat nfa.trans.list ($as_list r1n) rrn)
      )))
    
    (($get_trans_rec (re.++ r1 rr) tail) ($get_trans_rec r1 ($get_trans_rec rr tail)))

    (($get_trans_rec @re.empty tail) (nfa.trans.init nfa.epsilon tail))

    (($get_trans_rec (str.to_re s) tail)  
      (eo::define ((char (eo::extract s 0 0)))
      (eo::define ((s1n (eo::extract s 1 (eo::len s))))
      (eo::ite (eo::is_eq s1n "")
        (nfa.trans.init char tail) 
        (eo::define ((tail0 ($get_trans_rec (str.to_re s1n) tail))) (nfa.trans.init char tail0)
      ))
      )))
  )
)

(program $get_trans ((r RegLan) (tail nfa.trans) (s String) (r1 RegLan) (rr RegLan :list))
  (RegLan) nfa.trans ; regex tail -> new_tail
  (
    (($get_trans r) ($as_list ($get_trans_rec r nfa.trans.null)))
  )
)

(program $in_list ((t nfa.trans) (tt nfa.trans))
  (nfa.trans nfa.trans) Bool
  (
    (($in_list tt t)    (eo::not (eo::is_neg (eo::list_find nfa.trans.list tt t))))
  )
)

(program $add_to_nexts ((t nfa.trans) (st nfa.trans) (tt nfa.trans :list) (stt nfa.trans :list) (nexts nfa.trans))
  (nfa.trans nfa.trans nfa.trans) nfa.trans ; new stack nexts -> nexts
  (
    (($add_to_nexts nfa.trans.null st nexts) nexts)

    (($add_to_nexts (nfa.trans.list (nfa.trans.init nfa.push t) tt) st nexts) 
        ($add_to_nexts tt st ($add_to_nexts ($as_list t) (eo::cons nfa.trans.list t st) nexts))
    )

    (($add_to_nexts (nfa.trans.list (nfa.trans.init nfa.pop t) tt) (nfa.trans.list st stt) nexts)
          (eo::ite ($in_list nexts (nfa.trans.list (nfa.trans.init nfa.pop t) tt))
          ($add_to_nexts tt st nexts)
          ($add_to_nexts (eo::list_concat nfa.trans.list ($as_list st) tt) (nfa.trans.list st stt) (eo::cons nfa.trans.list (nfa.trans.list (nfa.trans.init nfa.pop t) tt) ($add_to_nexts ($as_list t) stt nexts)))
          )
    )

    (($add_to_nexts (nfa.trans.list (nfa.trans.init nfa.epsilon t) tt) st nexts) 
      (eo::ite ($in_list nexts (nfa.trans.list (nfa.trans.init nfa.epsilon t) st))
        ($add_to_nexts tt st nexts)
        ($add_to_nexts tt st ($add_to_nexts ($as_list t) st (eo::cons nfa.trans.list (nfa.trans.list (nfa.trans.init nfa.epsilon t) st) nexts))))
    )

    (($add_to_nexts (nfa.trans.list t tt) st nexts) (eo::ite ($in_list nexts (nfa.trans.list t st))
                                                            ($add_to_nexts tt st nexts)
                                                            ($add_to_nexts tt st (eo::cons nfa.trans.list (nfa.trans.list t st) nexts))))
  )
)

(program $match ((c String) (s String) (nexts nfa.trans) (tt nfa.trans :list) (t nfa.trans)
                (st nfa.trans) (z0 Int) (z1 Int))
  (nfa.char String nfa.trans nfa.trans) nfa.trans ; current_char rest_string current_states next_states transitions -> end_states
  (
    (($match c s nfa.trans.null nfa.trans.null) nfa.trans.null)

    (($match c "" nfa.trans.null nexts) nexts)

    (($match "" s t nfa.trans.null) ($match "" s nfa.trans.null ($add_to_nexts t nfa.trans.null nfa.trans.null)))

    (($match c s nfa.trans.null nexts) ($match (eo::extract s 0 0) (eo::extract s 1 (eo::len s)) nexts nfa.trans.null))

    (($match c s (nfa.trans.list (nfa.trans.list (nfa.trans.init c t) st) tt) nexts)  
            ($match c s tt ($add_to_nexts ($as_list t) st nexts))
    )

    (($match c s (nfa.trans.list (nfa.trans.list (nfa.trans.init nfa.allchar t) st) tt) nexts)  
            ($match c s tt ($add_to_nexts ($as_list t) st nexts))
    )

    (($match c s (nfa.trans.list (nfa.trans.list (nfa.trans.init (nfa.range z0 z1) t) st) tt) nexts)
            (eo::ite (eo::and ($compare_geq (eo::to_z c) z0) ($compare_geq z1 (eo::to_z c)))  
            ($match c s tt ($add_to_nexts ($as_list t) st nexts))
            ($match c s tt nexts))
    )

    (($match c s (nfa.trans.list t tt) nexts)  ($match c s tt nexts))
  )
)

(program $is_extended ((r RegLan) (rr RegLan :list))
  (RegLan) Bool
  (
    (($is_extended (re.comp r)) true)
    (($is_extended (re.inter r rr)) true)

    (($is_extended (re.union r rr)) (eo::or ($is_extended r) ($is_extended rr)))
    (($is_extended (re.++ r rr)) (eo::or ($is_extended r) ($is_extended rr)))
    (($is_extended (re.* r)) ($is_extended r))
    (($is_extended (re.+ r)) ($is_extended r))
    (($is_extended r) false)
  )
)

(program $str_eval_str_in_re_nfa ((r RegLan) (s String))
  (String RegLan) Bool
  (
    ;(($str_eval_str_in_re_nfa s r)  (eo::list_len nfa.trans.list nfa.trans.null))
    ;(($str_eval_str_in_re_nfa s r)  (eo::list_find nfa.trans.list nfa.trans.null nfa.trans.null))
    ;(($str_eval_str_in_re_nfa s r)  (eo::is_z (eo::list_len nfa.trans.list ($get_trans r))))
    ;(($str_eval_str_in_re_nfa s r)  ($match "" s ($get_trans r) nfa.trans.null))
    ;(($str_eval_str_in_re_nfa s r)  ($is_extended r))

    (($str_eval_str_in_re_nfa s r)  
                                    (eo::ite ($is_extended r)
                                    ($str_eval_str_in_re_brzo s r)
                                    ($in_list ($match "" s ($get_trans r) nfa.trans.null) (nfa.trans.list nfa.trans.null nfa.trans.null)))
                                    
    )

    ;(($str_eval_str_in_re_nfa s r)  ($in_list ($match "" s ($get_trans r) nfa.trans.null) (nfa.trans.list nfa.trans.null nfa.trans.null)))
  )
)


(program $as_uion ((t RegLan) (tt RegLan :list))
  (RegLan) RegLan
  (
    (($as_uion (re.union t tt)) (re.union t tt))
    (($as_uion t) (re.union t))
  )
)
(program $preprocess ((regex RegLan) (tail RegLan) (s String)(r1 RegLan) (rr RegLan :list) (c0 String) (c1 String))
  (RegLan RegLan) RegLan ; regex tail -> new_tail
  (
    (($preprocess re.all tail) ($preprocess (re.* re.allchar) tail))
    (($preprocess (re.opt r1) tail) ($preprocess (re.union @re.empty r1) tail))
    (($preprocess (re.+ r1) tail) ($preprocess (re.++ r1 (re.* r1)) tail))

    (($preprocess (re.range c0 c1) tail) (re.++ (re.range c0 c1) tail))
    
    (($preprocess (re.* r1) tail) (re.++ (re.* r1) tail))

    (($preprocess re.allchar tail) (re.++ re.allchar tail))

    (($preprocess re.none tail) re.none)

    (($preprocess (re.union r1 rr) tail)
      (eo::define ((r1n ($preprocess r1 tail)))
      (eo::define ((rrn ($preprocess rr tail)))
      (eo::list_concat re.union ($as_uion r1n) rrn)
      )))
    
    (($preprocess (re.++ r1 rr) tail) ($preprocess r1 ($preprocess rr tail)))

    (($preprocess @re.empty tail) (re.++ @re.empty tail))

    (($preprocess (str.to_re s) tail)  (re.++ (str.to_re s) tail))
  )
)