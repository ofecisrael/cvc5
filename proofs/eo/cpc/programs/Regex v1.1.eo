
(define nfa.index () Int)
(define nfa.char () String)

(declare-const nfa.epsilon nfa.char)
(declare-const nfa.allchar nfa.char)
(declare-const nfa.range (-> nfa.char nfa.char nfa.char))

(declare-type nfa.trans ())

(declare-const nfa.trans.null nfa.trans)
(declare-const nfa.trans.decline nfa.trans)

(declare-const nfa.trans.list (-> nfa.trans nfa.trans nfa.trans) :right-assoc-nil nfa.trans.null)
(declare-const nfa.trans.init (-> nfa.char nfa.trans nfa.trans))


(program $to_list ((t nfa.trans) (tt nfa.trans :list))
  (nfa.trans) nfa.trans
  (
    (($to_list (nfa.trans.list t tt)) (nfa.trans.list t tt))
    (($to_list t) (nfa.trans.list t))
  )
)

(program $get_trans_rec ((regex RegLan) (tail nfa.trans) (s String)(r1 RegLan) (rr RegLan :list) (c0 String) (c1 String))
  (RegLan nfa.trans) nfa.trans ; regex tail -> new_tail
  (
    (($get_trans_rec (re.range c0 c1) tail) ($get_trans_rec (str.to_re "a") tail))

    (($get_trans_rec re.none tail) nfa.trans.null)

    (($get_trans_rec (re.union r1 rr) tail) 
      (eo::define ((r1n ($get_trans_rec r1 tail))) 
      (eo::define ((rrn ($get_trans_rec rr tail))) 
      (eo::list_concat nfa.trans.list ($to_list r1n) rrn)
      )
      ))
    
    (($get_trans_rec (re.++ r1 rr) tail) ($get_trans_rec r1 ($get_trans_rec rr tail)))

    (($get_trans_rec (str.to_re "") tail) tail)
    (($get_trans_rec (str.to_re s) tail)  
      (eo::define ((char (eo::extract s 0 0)))
      (eo::define ((s1n (eo::extract s 1 (eo::len s))))
      (eo::define ((trans0 ($get_trans_rec (str.to_re s1n) tail)))
      (nfa.trans.init char trans0)
      ))))
  )
)



(program $get_trans ((r RegLan) (tail nfa.trans) (s String)(r1 RegLan) (rr RegLan :list))
  (RegLan) nfa.trans ; regex tail -> new_tail
  (
    (($get_trans r) ($to_list ($get_trans_rec r nfa.trans.null)))
  )
)

(program $add_to_nexts  ((t nfa.trans) (tt nfa.trans :list) (nexts nfa.trans))
  (nfa.trans nfa.trans) nfa.trans ; new nexts -> nexts
  (
    (($add_to_nexts nfa.trans.null nexts) nexts)

    (($add_to_nexts (nfa.trans.list t tt) nexts) (eo::ite (eo::is_neg (eo::list_find nfa.trans.list nexts t)) 
                                                  ($add_to_nexts tt (eo::cons nfa.trans.list t nexts)) ($add_to_nexts tt nexts)))
  )
)

(program $match ((c String) (c0 String) (s String) (nexts nfa.trans) (tt nfa.trans :list) (t nfa.trans))
  (nfa.char String nfa.trans nfa.trans) nfa.trans ; current_char rest_string current_states next_states transitions -> end_states
  (
    (($match c s nfa.trans.null nfa.trans.null) nfa.trans.null)

    (($match c "" nfa.trans.null nexts) nexts)

    (($match c s nfa.trans.null nexts) ($match (eo::extract s 0 0) (eo::extract s 1 (eo::len s)) nexts nfa.trans.null))

    ;(($match c s (nfa.trans.list (nfa.trans.init c t) tt) nexts)  ($match c s tt (eo::list_concat nfa.trans.list ($to_list t) nexts)))
    (($match c s (nfa.trans.list (nfa.trans.init c t) tt) nexts)  ($match c s tt ($add_to_nexts ($to_list t) nexts)))

    (($match c s (nfa.trans.list t tt) nexts)  ($match c s tt nexts))
  )
)

(program $in_list  ((t nfa.trans) (tt nfa.trans))
  (nfa.trans nfa.trans) Bool
  (
    (($in_list tt t)    (eo::not (eo::is_neg (eo::list_find nfa.trans.list tt t))))
  )
)

(program $str_eval_str_in_re_nfa ((r RegLan) (s String))
  (String RegLan) Bool
  (
    ;(($str_eval_str_in_re_nfa s r)  (eo::list_len nfa.trans.list nfa.trans.null))
    ;(($str_eval_str_in_re_nfa s r)  (eo::list_find nfa.trans.list nfa.trans.null nfa.trans.null))
    ;(($str_eval_str_in_re_nfa s r)  ($get_trans r))
    ;(($str_eval_str_in_re_nfa s r)  ($match "" s nfa.trans.null ($get_trans r)))

    (($str_eval_str_in_re_nfa s r)  ($in_list ($match "" s nfa.trans.null ($get_trans r)) nfa.trans.null))
  )
)